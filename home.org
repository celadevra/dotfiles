# -*- org-confirm-babel-evaluate: nil -*-
* Installation
  This section is not automatically run when exporting.
** Mac
   The following deps will be installed (mostly with brew): wget, emacs, git, oh-my-zsh, rbenv, ruby-build, irssi, mutt, offlineimap, ruby, tmux, keybase, ghc and cabal.

Will also use brew cask to install the following: iterm2, quicksilver, 1password, dropbox, shiftit, bartender, devonthink-pro-office, racket, zotero standalone.

Brew may ask you to install Xcode command line tools first.

#+BEGIN_SRC sh :dir /usr/local
PATH=/usr/local/bin:$PATH
mkdir homebrew && curl -L https://github.com/Homebrew/homebrew/tarball/master | tar xz --strip 1 -C homebrew
brew update
#+END_SRC

#+BEGIN_SRC sh
brew install wget bash ag emacs notmuch git irssi gpg2 awscli mutt offline-imap tmux keybase mpw shadowsocks-libev
brew install duplicity
brew install ghc cabal-install
brew tap homebrew/python
brew install matplotlib matplotlib/basemap
#+END_SRC

#+BEGIN_SRC sh
echo "/usr/local/bin/bash" | sudo tee -a /etc/shells
#+END_SRC

#+RESULTS:
: /usr/local/bin/bash

#+BEGIN_SRC sh
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
~/.rbenv/plugins/ruby-build/bin/rbenv-install 2.3.0
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
cabal update
cabal install cabal
#+END_SRC

#+RESULTS:
| Config      | file              | path                     | source  | is                       | default | config              | file. |
| Config      | file              | /Users/xhy/.cabal/config | not     | found.                   |         |                     |       |
| Writing     | default           | configuration            | to      | /Users/xhy/.cabal/config |         |                     |       |
| Downloading | the               | latest                   | package | list                     | from    | hackage.haskell.org |       |
| Resolving   | dependencies...   |                          |         |                          |         |                     |       |
| Downloading | Cabal-1.22.6.0... |                          |         |                          |         |                     |       |
| Configuring | Cabal-1.22.6.0... |                          |         |                          |         |                     |       |
| Building    | Cabal-1.22.6.0... |                          |         |                          |         |                     |       |
| Installed   | Cabal-1.22.6.0    |                          |         |                          |         |                     |       |

#+BEGIN_SRC sh
brew tap caskroom/cask
#+END_SRC

#+BEGIN_SRC sh
brew cask install calibre flux firefox iterm2 karabiner keka quicksilver caffeine gpgtools dropbox shiftit squirrel devonthink-pro-office qgis racket scrivener transmission zotero
#+END_SRC

#+BEGIN_SRC sh
brew cask install shadowsocksx
#+END_SRC

Docker used to be difficult and cumbersome to install on OS X, thanks to [[https://blog.andyet.com/2016/01/25/easy-docker-on-osx/][&yet]], there is now a simpler solution for using docker on my machine.

#+BEGIN_SRC sh
wget https://github.com/nlf/dlite/releases/download/1.1.1/dlite -o /usr/local/bin/dlite
sudo dlite install
#+END_SRC

Start the Dlite service:
#+BEGIN_SRC sh
launchctl start local.dlite
#+END_SRC

Then just install docker with Homebrew:
#+BEGIN_SRC sh
brew install docker
#+END_SRC

*** Language-dependence installations

Node:
#+BEGIN_SRC sh
brew install node npm
npm install npm -g
#+END_SRC

Python:
#+BEGIN_SRC sh
brew install python3
#+END_SRC

Haskell:
#+BEGIN_SRC sh
brew install ghc
#+END_SRC
* Emacs

Install emacs init file and my settings (itself an Org file) to .emacs.d:

#+NAME: emacs
#+BEGIN_SRC sh :results silent :dir emacs
unlink $HOME/.emacs.d/init.el
unlink $HOME/.emacs.d/Haoyang.org
unlink $HOME/.emacs.d/snippets
unlink $HOME/.emacs.d/eshell/profile
ln -s $PWD/init.el $HOME/.emacs.d/init.el
ln -s $PWD/Haoyang.org $HOME/.emacs.d/Haoyang.org
ln -s $PWD/snippets $HOME/.emacs.d/snippets
ln -s $PWD/eshell/rc $HOME/.emacs.d/eshell/profile
#+END_SRC

* Git

For now, I only store some configs of Git on the system.

#+NAME: git
#+BEGIN_SRC sh :results silent :dir git
unlink $HOME/.gitconfig
ln -s $PWD/gitconfig $HOME/.gitconfig
#+END_SRC

* Irssi

#+NAME: irssi
#+BEGIN_SRC sh :results silent :dir irssi
unlink $HOME/.irssi
ln -s $PWD $HOME/.irssi
#+END_SRC

* Mutt
  
#+NAME: mutt
#+BEGIN_SRC sh :results silent :dir mutt
unlink $HOME/.mutt
unlink $HOME/.muttrc
unlink $HOME/.goobookrc
unlink $HOME/.notmuch-config
chmod 600 muttcert
ln -s $PWD/dotmutt $HOME/.mutt
ln -s $PWD/muttrc $HOME/.muttrc
ln -s $PWD/goobookrc $HOME/.goobookrc
ln -s $PWD/notmuch-config $HOME/.notmuch-config
#+END_SRC

* Nginx
  Here is the config file I use to set up a very simple docker image, that is built on newest Nginx image, and serve the simple function to serve contents in a directory to the Web.

  The first step would be pulling the newest Nginx image:

  #+NAME: nginx-pull
  #+BEGIN_SRC sh :dir /snakehsu@ssh.expoundite.net:/home/snakehsu/src/docker-nginx
  docker pull nginx
  #+END_SRC

  Next, check my Nginx config:

  #+NAME: nginx-config
  #+BEGIN_SRC conf :tangle /snakehsu@ssh.expoundite.net:/home/snakehsu/src/docker-nginx/config

    worker_processes 1;

    events { worker_connections 1024; }

    http {
        include /etc/nginx/mime.types;
        default_type text/html;
        server {
            listen 443 ssl http2;
            server_name expoundite.net;
            ssl_certificate /etc/nginx/fullchain.pem;
            ssl_trusted_certificate /etc/nginx/chain.pem;
            ssl_certificate_key /etc/nginx/privkey.pem;
            location / {
                root /data/www;
                try_files $uri $uri/ $uri.html;
            }
        }

        server {
            listen 80;
            return 301 https://expoundite.net$request_uri;
        }
    }
  #+END_SRC
  
  and the Docker file:

  #+NAME: nginx-dockerfile
  #+BEGIN_SRC conf :tangle /snakehsu@ssh.expoundite.net:/home/snakehsu/src/docker-nginx/Dockerfile
    FROM nginx
    COPY config /etc/nginx/nginx.conf
    COPY privkey.pem /etc/nginx/privkey.pem
    COPY chain.pem /etc/nginx/chain.pem
    COPY fullchain.pem /etc/nginx/fullchain.pem
  #+END_SRC
  
  Then I can build an Nginx docker image with the right configs:

  #+NAME: nginx-build
  #+BEGIN_SRC sh :dir /snakehsu@ssh.expoundite.net:src/docker-nginx
    docker build -t org-nginx .
  #+END_SRC
  
  #+NAME: nginx-restart
  #+BEGIN_SRC sh :dir /snakehsu@ssh.expoundite.net:
    docker ps | grep 'org-nginx' | awk '{ print $9 }'
    docker kill $(docker ps -a -q --filter ancestor=org-nginx --format='{{.ID}}')
    docker run -d -p 443:443 -p 80:80 -v /home/snakehsu/site:/data/www org-nginx
  #+END_SRC

  #+NAME: nginx-cleanup
  #+BEGIN_SRC sh :dir /snakehsu@ssh.expoundite.net:
    # delete all stopped containers
    docker rm $(docker ps -q -f status=exited)
    # remove untagged images
    docker images | grep "<none>" | awk '{print $3}' | xargs docker rmi
  #+END_SRC

  #+RESULTS: nginx-cleanup
  | 5a7d373e43cc |                                                                  |
  | 3e9ea94ac4c6 |                                                                  |
  | Deleted:     | 534e8c575bd054ae830fbc92a5dbcf7b153df0cd413da6a6ae079b3f133041e5 |
  | Deleted:     | ce86d1d92b637a7649060428d63232c6cfbe5defb2de98cb403da6977e8f2558 |
  | Deleted:     | 0444eb3575183be736dbbdc512641b1988363129c4732eae7b644e5e3e10af98 |
  | Deleted:     | 45831dd8ef5c9801cfb256a3a5e2467b7e86627cbd5fce46205ed09e1ed3f7e6 |
  | Deleted:     | ae8e1e9c54b3fcaed87ff6ded395690df8dbd2bb4e9842485ab36a89d491c6f9 |
  | Deleted:     | bf58831fd41ca27d5d1f0c42b30b21d5963d0e6ff2b65e1054ecc9ac402acc47 |
  | Deleted:     | 18de280c0e54fa92a739cd31f417f5f10f8a30041ef1f9c7de742541cf07e674 |
  | Deleted:     | cd0794b5fd94988910e766ec76520bf2bcb2a01a7f79f2d3fa50c02437c21284 |
  | Deleted:     | 152440d1ba686b6580dc79043c7bb7820523a526318e044f6f6657dac6592f50 |
  | Deleted:     | 5c9a73b9c4ad19355ac1688f283331263b3b26f3729d1ce7e7216604f0460d54 |
  | Deleted:     | 9b607719a62aebe658894221e14778b3d3a3a410a06ff7b35a95be9f4e6be007 |
  | Deleted:     | f32095d4ba8a9cbc622d10ae515b127cf863e47db3d63ed140f4ae85c7afb0cc |

* Ruby

#+NAME: ruby
#+BEGIN_SRC sh :results silent :dir ruby
unlink $HOME/.gemrc
ln -s $PWD/gemrc $HOME/.gemrc
#+END_SRC

* tmux

#+NAME: tmux
#+BEGIN_SRC sh :results silent :dir tmux
unlink $HOME/.tmux.conf
ln -s $PWD/tmux.conf $HOME/.tmux.conf
#+END_SRC

* Vim

I only sometimes use vim to do quick editing and send git commit message, so the vimrc is quite simple.

#+NAME: vim
#+BEGIN_SRC sh :results silent :dir vim
unlink $HOME/.vimrc
ln -s $PWD/vimrc $HOME/.vimrc
#+END_SRC

* zsh
  
#+NAME: zsh
#+BEGIN_SRC sh :results silent :dir zsh
unlink $HOME/.zshrc
ln -s $PWD/zshrc $HOME/.zshrc
#+END_SRC

* bash
  #+NAME: bash
  #+BEGIN_SRC sh :results silent :dir bash
  unlink $HOME/.profile
  unlink $HOME/.bashrc
  ln -s $PWD/profile $HOME/.profile
  ln -s $PWD/rc $HOME/.bashrc
  #+END_SRC
* Credentials

#+NAME: cred
#+BEGIN_SRC sh :dir creds :var PPH=(read-passwd "GnuPG Passphrase: ")
gpg2 -o credentials.org --passphrase="$PPH" -d credentials.org.gpg 
/usr/local/bin/emacs-24.5 credentials.org --batch --eval '(setq org-confirm-babel-evaluate nil)' -f org-org-export-as-org --kill
rm credentials.org
#+END_SRC

#+RESULTS: cred

* Execute
#+CALL: emacs() :results silent
#+CALL: git() :results silent
#+CALL: irssi() :results silent
#+CALL: mutt() :results silent
#+CALL: ruby() :results silent
#+CALL: tmux() :results silent
#+CALL: vim() :results silent
#+CALL: zsh() :results silent
#+CALL: bash() :results silent
