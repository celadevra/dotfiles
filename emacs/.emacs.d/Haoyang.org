* README

Haoyang's GNU Emacs configuration, the n-th iteration.

Ideas are from [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]], [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sache Chua's config]], [[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][Sam217's blog]] and my desire to use Org-mode as an effective project management tool.

** Principles

- Effective navigation (hence Evil-mode)
- Easy to read and edit (hence use-package, visual-line-mode)
- Simlified shortcuts
- Self documenting (hence which-key)
  
* Basic information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Haoyang Xu")
(setq user-mail-address "github@expoundite.net")
#+END_SRC

* Dependencies

This config requires Org-mode newer than 8.0, and Emacs > 23.

#+BEGIN_SRC emacs-lisp
  (when (version<= emacs-version "24")
  (message "This config requires at least Emacs 24, please upgrade."))

#+END_SRC

This config utilizes Emacs' package support. Some additional repositories are added.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

Bootstrap =use-package=.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package) ; unless it is already installed
    (package-refresh-contents) ; updage packages archive
    (package-install 'use-package)) ; and install the most recent version of use-package

  (require 'use-package)
#+END_SRC

* Behaviour

A few sensible choices that affect the global behaviour of Emacs:

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1 ); delete excess backup versions silently
  (setq version-control t ); use version control
  (setq vc-make-backup-files t ); make backups file even when in version controlled dir
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
  (setq vc-follow-symlinks t )       ; don't ask for confirmation when opening symlinked file
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
  (setq inhibit-startup-screen t ); inhibit useless and old-school startup screen
  (setq ring-bell-function 'ignore ); silent bell when you make a mistake
  (setq coding-system-for-read 'utf-8 ); use utf-8 by default
  (setq coding-system-for-write 'utf-8 )
  (setq sentence-end-double-space nil); sentence SHOULD end with only a point.
  (setq default-fill-column 80); toggle wrapping text at the 80th character
  (setq initial-scratch-message "Welcome in Emacs") ; print a default message in the empty scratch buffer opened at startup
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode 0)
  (auto-fill-mode) ; toggle auto-fill-mode
  (diminish auto-fill-function "F") ; diminish the hint to a simple "F"
  (setq inhibit-startup-screen 1)
  (setq org-hide-emphasis-markers t)
  (setq package-check-singature nil)
  (setf epa-pinentry-mode 'loopback)
#+END_SRC
** Evil-mode
   Evil-mode allows vim-style modes and keybindings in Emacs. Now you have the best editor in the best Lisp Machine.

   #+BEGIN_SRC emacs-lisp
     (use-package evil :ensure t
                  :config
                  (evil-mode 1)
                  (evil-set-initial-state 'eww-mode 'emacs)
                  (evil-set-initial-state 'elfeed-search-mode 'emacs)
                  (evil-set-initial-state 'elfeed-show-mode 'emacs)
                  (evil-set-initial-state 'deft-mode 'emacs)
                  :diminish undo-tree-mode)
   #+END_SRC
  
** Swiper and friends

   #+BEGIN_SRC emacs-lisp
     (use-package swiper :ensure t
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       :diminish ivy-mode
     )
     (use-package counsel :ensure t)
   #+END_SRC

** Version control

   #+BEGIN_SRC emacs-lisp
     (use-package magit :ensure t
       :diminish auto-revert-mode)
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile :ensure t
       :config (projectile-global-mode)
       :diminish projectile-mode "P")

     (use-package counsel-projectile :ensure t
       :config (counsel-projectile-on))
   #+END_SRC
** Smartparens and rainbow delimiters

   Smartparens is an extension for more effective programming with less cause by
   missing/unmatched parentheses. Rainbow delimeters is for better looking interface.
  
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens :ensure t
       :config
       (smartparens-global-mode t)
       (require 'smartparens-config)
       :diminish smartparens-mode)

     (use-package rainbow-delimiters :ensure t
       :config
       (add-to-list 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck :ensure t
       ;; intero installs flycheck as a dep, but still
       :init (global-flycheck-mode))
   #+END_SRC
** general.el and keybindings

   #+BEGIN_SRC emacs-lisp
     (use-package general :ensure t
      :config
       (general-define-key
        :states '(normal visual insert emacs)
        :prefix "SPC"
        :non-normal-prefix "S-SPC"

        ;; simple commands
        "/" 'counsel-ag
        "x" 'counsel-M-x
        "U" 'counsel-unicode-char
        "#" 'ansi-term

        ;; applications
        "a" '(:ignore t :which-key "Applications")
        "ad" 'dired
        "ae" 'elfeed

        ;; buffer operations
        "b" '(:ignore t :which-key "Buffer commands")
        "bb" 'ivy-switch-buffer
        "bl" 'ibuffer
        "bd" 'evil-delete-buffer
        "bp" 'evil-prev-buffer
        "bn" 'evil-next-buffer

        ;; deft operations
        "d" '(:ignore t :which-key "Deft")
        "dd" 'deft
        "df" 'deft-find-file

        ;; file and dir commands
        "f"  '(:ignore t :which-key "File commands")
        "ff" 'counsel-find-file
        "fa" 'find-file-at-point
        "fp" 'counsel-projectile
        "fs" 'save-buffer
        "fr" 'counsel-recentf

        ;; git operations
        "g" '(:ignore t :which-key "Git commands")
        "gs" 'magit-status
        "gd" 'magit-diff
        "gl" 'magit-log

        ;; help and docs
        "h" '(:ignore t :which-key "Help and documentation")
        "hf" 'counsel-describe-function
        "hv" 'counsel-describe-variable
        "hw" 'woman
        "hi" 'counsel-info-lookup-symbol

        ;; org-mode
        "o" '(:ignore t :which-key "Org-mode")
        "oa" 'org-agenda
        "oc" 'org-capture
        "oe" 'org-edit-special
        "ol" 'org-store-link
        "oL" 'org-insert-link
        "oo" 'counsel-outline
        "op" 'owp/do-publication
        "ot" 'counsel-org-tag

        ;; window operations
        "w" '(:ignore t :which-key "Windows")
        "ww" 'ace-window
        "wo" 'delete-other-windows
        "wv" 'evil-window-vsplit
        "ws" 'evil-window-split
        "wj" 'evil-window-down
        "wk" 'evil-window-up
        "wl" 'evil-window-right
        "wh" 'evil-window-left)
       (general-define-key "C-s" 'swiper)
       (general-define-key :keymaps 'org-mode-map :states '(insert normal emacs) "TAB" 'org-cycle))
     (use-package which-key :ensure t
       :config
       (which-key-mode 1)
       :diminish which-key-mode)
   #+END_SRC
** Completion
   At this point in time, it seems you should go for company-mode rather than auto-complete.

   #+BEGIN_SRC emacs-lisp
     (use-package company :ensure t
       :config
       (add-hook 'after-init-hook 'global-company-mode)
       (setq company-backend-list '(company-robe
                                  company-web
                                  company-jedi))
       :diminish company-mode)
   #+END_SRC

** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet :ensure t
       :config
       (yas-global-mode t))
   #+END_SRC
** Proxies
   It is the sad reality in China that to access many useful resources on the
   Internet, you have to use a proxy. 

   #+BEGIN_SRC emacs-lisp :tangle no
     ;(setq url-proxy-services '(("no_proxy" . "^\\(localhost|192.168.*\\)")
     ;                           ("http"     . "127.0.0.1:8118")
     ;                           ("https"    . "127.0.0.1:8118")))
     ;(setenv "http_proxy" "socks5h://127.0.0.1:1080") ; elfeed uses curl, this makes curl called from emacs use proxy

   #+END_SRC
   
   Update: Not using elfeed now, so proxies are not really needed.

* Look
** Font
  中文和英文字体显示应对齐，一个汉字对应两个英文字符。
  Chinese and English displays should align perfectly.
  
  #+BEGIN_SRC emacs-lisp

  (if (display-graphic-p)
    (progn ;; set English font
          (set-face-attribute 'default nil :font "Anonymous Pro-12")
          ;; Chinese font
          (dolist (charset '(kana han cjk-misc bopomofo))
            (set-fontset-font (frame-parameter nil 'font)
            charset (font-spec :family "Source Han Sans CN"
            :size 18)))
            (setq face-font-rescale-alist '(("Source Han Sans CN" . 1.0)))))
  #+END_SRC
  
  Under terminal, Emacs seems unable to set the character width of HORIZONTAL
  ELLIPSIS (#x2026), LEFT DOUBLE QUOTATION MARK (#x201c), and LEFT DOUBLE
  QUOTATION MARK (#x201d) correctly. As a result, Emacs users under tty gets
  confused when the cursor seems to be on a space after the above characters,
  but is actually on those characters themselves. And when they try to insert or
  delete characters, nasty surprise happens.

  One solution implemented here is setting a display table for tty. The display
  table tells Emacs to display another glyph when the input is one of the above
  3 glyphs. 

  Some input methods such as Rime can be customized to insert alternative glyph
  as well, but in that case your file actually contains punctuations different
  from what other people use, which causes further problems.
  
  The best solution, though, is to make Emacs treat …, “, and ” characters as
  half-width character instead of full-width. I haven't figured out how to do
  that, and my preliminary investigation suggests that to do so involves Emacs'
  elisp source code.

  #+BEGIN_SRC emacs-lisp
    (add-hook 'tty-setup-hook
              (lambda ()
                (let ((disptab (make-display-table)))
                  (aset disptab 8230
                        (vector (make-glyph-code ?⋯)))
                  (aset disptab 8220
                        (vector (make-glyph-code ?❝)))
                  (aset disptab 8221
                        (vector (make-glyph-code ?❞)))
                  (set-window-display-table nil disptab))))
  #+END_SRC

** Theme
  The following are theme setup.
  #+BEGIN_SRC emacs-lisp
    (use-package darktooth-theme :ensure t
      :config (load-theme 'darktooth t nil))
  #+END_SRC

** Telephone-line: A fancy modeline
   #+BEGIN_SRC emacs-lisp
     (use-package telephone-line :ensure t
       :config
       (setq telephone-line-lhs
             '((evil   . (telephone-line-evil-tag-segment))
               (accent . (telephone-line-vc-segment
                          telephone-line-erc-modified-channels-segment
                          telephone-line-process-segment))
               (nil    . (telephone-line-minor-mode-segment
                          telephone-line-buffer-segment))))
       (setq telephone-line-rhs
             '((nil    . (telephone-line-misc-info-segment))
               (accent . (telephone-line-major-mode-segment))
               (evil   . (telephone-line-airline-position-segment))))
       (telephone-line-mode 1))
   #+END_SRC
** Relative line number

   #+BEGIN_SRC emacs-lisp
     (use-package relative-line-numbers :ensure t
       :config
       (global-relative-line-numbers-mode t)
       (setq relative-line-numbers-motion-function 'forward-visible-line)
       (defun relative-abs-line-numbers-format (offset)
           "The default formatting function.
     Return the absolute value of OFFSET, converted to string."
           (if (= 0 offset)
               (number-to-string (line-number-at-pos))
             (number-to-string (abs offset))))
       (set-face-attribute 'relative-line-numbers-current-line nil :weight 'bold :foreground "#090909" :background "#3390ff")
       (setq relative-line-numbers-format 'relative-abs-line-numbers-format))

   #+END_SRC
* Languages
** Org-mode
  #+BEGIN_SRC emacs-lisp
    (use-package org :ensure org-plus-contrib
      :config
      (progn
        (setq org-hide-emphasis-markers t) ; hide markers around bold/emphasis/delete etc, original value is nil.
        (setq org-ellipsis " ↲") ; more dense ellipsis, original value is '...'
        (setq org-agenda-files (list "~/org/organizer.org"))
        (setq org-todo-keywords
              '((sequence "TO-READ(r@)" "TO-WRITE(w@)" "TO-DO(t@)" "TO-LEARN(l@)" "WAITING(w@/!)" "|" "DONE(d@/!)" "CANCELLED(c@)")))
        (setq org-use-fast-todo-selection t)
        (setq org-use-fast-tag-selection t)
        (setq org-agenda-ndays 7)
        (setq org-agenda-show-all-dates t)
        (setq org-agenda-skip-scheduled-if-done t)
        (setq org-agenda-start-on-weekday nil)
        (setq org-reverse-note-order t) ; notes attached to item sorted in date desc order
        (setq org-deadline-warning-days 14) ; depend on your pacing, default is 3
        (setq org-default-notes-file "~/org/organizer.org")
        (setq org-capture-templates
              '(("t" "Task" entry (file+headline org-default-notes-file "Inbox")
                 "* TO-DO %^{Title}\n")
                ("b" "Bookmark" entry (file+headline org-default-notes-file "Bookmarks")
                 "* TO-READ %^{Title} %^g\n %^{URI} %?\n")
                ("n" "Work Notes" entry (clock)
                 "* %^{Title}\n %U \n %^C \n\n %?")
                ("r" "Read Notes" entry (file+headline org-default-notes-file "Notes")
                 "* %^{Title} %^g\n %^{URI|%x|%c} \n %?")
                ("q" "Quotes" entry (file+headline "~/org/wiki/quotes.org" "Quotes")
                 "* %^{Text|%x|%c} %^g\n --%^{Source}")
                ("s" "Snippet" entry (file+headline org-default-notes-file "Snippets")
                 "* %^{Title} %^g\n %U \n #+BEGIN_SRC \n %^C \n #+END_SRC \n %?")))
        (setq org-refile-targets '((nil . (:maxlevel . 6)))) ; default is to maxlevel 2
        (setq org-babel-load-languages
              '((sh . t)
                (emacs-lisp . t)
                (ruby . t)
                (R . t)
                (dot . t)
                (python . t)
                (haskell . t))) ; these are the langs I work with
        (org-babel-do-load-languages 'l t) ; required for the above to work
          (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                              (paragraph contents info) activate)
          "Join consecutive Chinese lines into a single long line without 
    unwanted space when exporting org-mode to html."
          (let ((fixed-contents)
                (orig-contents (ad-get-arg 1))
                (reg-han "[[:multibyte:]]"))
            (setq fixed-contents (replace-regexp-in-string
                                  (concat "\$latex " reg-han
                                          "\$ *\n *\$latex " reg-han "\$")
                                  "\\1\\2" orig-contents))
            (ad-set-arg 1 fixed-contents)))))
  #+END_SRC
*** Org-bullets
    This package makes cooler Org-mode headings.

    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets :ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
	)
    #+END_SRC

*** Org-ref
    Org-ref is a package for inserting bibliography citations into org-mode articles. The user manual is located at https://github.com/jkitchin/org-ref/blob/master/org-ref.org.

    One can use the following to specify the .bib file to use and the bibliography style:

     #+BEGIN_EXAMPLE
     * References
     <<bibliography link>>

     bibliographystyle:unsrt
     bibliography:org-ref.bib
     #+END_EXAMPLE
     #+BEGIN_SRC emacs-lisp
       (use-package org-ref :ensure t
         :config
         (setq reftex-default-bibliography '("~/org/bibliography/references.bib"))
         (setq org-ref-bibliography-notes "~/org/bibliography/notes.org"
               org-ref-default-bibliography '("~/org/bibliography/references.bib")
               org-ref-pdf-directory "~/org/bibliography/bibtex-pdfs/")
         )
     #+END_SRC
*** ox-rss
    This is a package for producing RSS feeds from org-mode headings.

    #+BEGIN_SRC emacs-lisp
      (require 'ox-rss)

    #+END_SRC
*** org-webpage
    Org-webpage is a package that generate static sites from Org files. It is
    easier to set up than using Org's own publishing functions.

    #+BEGIN_SRC emacs-lisp
      (use-package org-webpage :ensure t
        :config
        (owp/add-project-config
         '("expoundite.net"
           :repository-directory "~/org/websrc"
           :remote (rclone "local" "/tmp/website")
           :site-domain "https://expoundite.net"
           :site-main-title "chmod +w Web"
           :site-sub-title "Essays"
           :ignore ("upload.org")
           :theme (worg)
	   :default-category "essay"
           :source-browse-url ("GitHub" "https://github.com/celadevra/expoundite.net")
           :web-server-port 9999)))
    #+END_SRC

    #+RESULTS:
    : t

** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("\\.mdwn\\'" . markdown-mode)
              ("\\.md\\'" . markdown-mode)
              ("README\\.md\\'" . gfm-mode)))
   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode :ensure t)

     (use-package intero :ensure t
       :config
       (add-hook 'haskell-mode-hook 'intero-mode))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package python :ensure t
       :config
       (setq-default python-shell-interpreter "ipython")
       (setq-default python-shell-buffer-name "IPython")
       (setq python-shell-interpreter-args "--simple-prompt --colors=linux")
       (setq python-shell-prompt-input-regexp "In \\[0-9]+\\]: ")
       (setq python-shell-prompt-output-regexp "Out\\[0-9]+\\]: ")
       (setq python-shell-completion-setup-code
          "from IPython.core.completerlib import module_completion"
          python-shell-completion-module-string-code
          "';'.join(module_completion('''%s'''))\n"
          python-shell-completion-string-code
          "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))

     (use-package pyvenv :ensure t
       :config
       (add-hook 'pyvenv-post-activate-hooks 'pyvenv-restart-python))

     (use-package company-jedi :ensure t)
   #+END_SRC
** Web and JavaScript
   Web development is complex and requires no less than a full-blown IDE.
   Luckily, Emacs has some nice extensions for writing HTML, (S)CSS, templates,
   and JS codes.

   #+BEGIN_SRC emacs-lisp
     (use-package web-mode :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
       (setq web-mode-enable-current-element-highlight t)
       (defun my-web-mode-hook ()
         "hooks for webmode"
         (setq web-mode-markup-indent-offset 2)
         (setq web-mode-css-indent-offset 2)
         (setq web-mode-code-indent-offset 2))
       (add-hook 'web-mode-hook 'my-web-mode-hook))
   #+END_SRC

   #+RESULTS:
   : t
   
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
       (add-to-list 'auto-mode-alist '("\\.json\\'" . js2-mode))
       (setq js2-strict-missing-semi-warning nil)
       (setq js2-missing-semi-one-line-override t))
   #+END_SRC

   #+RESULTS:
   : t
   
   #+BEGIN_SRC emacs-lisp
     (use-package less-css-mode :ensure t)
   #+END_SRC

   #+RESULTS:

* Applications
** Deft
   Deft is a note-taking tool allowing one to use Emacs like Notational Velocity
   and Simplenote. I am using it to quickly access the backend of a local Ikiwiki
   installation.
  
   #+BEGIN_SRC emacs-lisp
     (use-package deft :ensure t
       :config
       (setq deft-extensions '("md" "txt"))
       (setq deft-default-extension "md")
       (setq deft-directory "~/Notes")
       (setq deft-recursive t)
       (setq deft-use-filename-as-title t)
       (setq deft-use-filter-string-for-filename t))
   #+END_SRC
