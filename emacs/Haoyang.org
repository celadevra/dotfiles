* README

Haoyang's GNU Emacs configuration, the n-th iteration.

Ideas are from [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]], [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sache Chua's config]], [[https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/][Sam217's blog]] and my desire to use Org-mode as an effective project management tool.

** Principles

- Effective navigation (hence Evil-mode)
- Easy to read and edit (hence use-package, visual-line-mode)
- Simlified shortcuts
- Self documenting (hence which-key)
  
* Basic information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Haoyang Xu")
(setq user-mail-address "github@expoundite.net")
#+END_SRC

* Behaviour

A few sensible choices that affect the global behaviour of Emacs:

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1 ); delete excess backup versions silently
  (setq version-control t ); use version control
  (setq vc-make-backup-files t ); make backups file even when in version controlled dir
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
  (setq vc-follow-symlinks t )       ; don't ask for confirmation when opening symlinked file
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
  (setq inhibit-startup-screen t ); inhibit useless and old-school startup screen
  (setq ring-bell-function 'ignore ); silent bell when you make a mistake
  (setq coding-system-for-read 'utf-8 ); use utf-8 by default
  (setq coding-system-for-write 'utf-8 )
  (setq sentence-end-double-space nil); sentence SHOULD end with only a point.
  (setq default-fill-column 80); toggle wrapping text at the 80th character
  (setq initial-scratch-message "Welcome in Emacs") ; print a default message in the empty scratch buffer opened at startup
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode 0)
  (auto-fill-mode) ; toggle auto-fill-mode
  (diminish auto-fill-function "F") ; diminish the hint to a simple "F"
  (setq inhibit-startup-screen 1)
  (setq org-hide-emphasis-markers t)
  (setq package-check-singature nil)
  (setf epa-pinentry-mode 'loopback)
#+END_SRC

** Proxies
   It is the sad reality in China that to access many useful resources on the
   Internet, you have to use a proxy. 

   #+BEGIN_SRC emacs-lisp
     ;(setq url-proxy-services '(("no_proxy" . "^\\(localhost|192.168.*\\)")
     ;                           ("http"     . "127.0.0.1:8118")
     ;                           ("https"    . "127.0.0.1:8118")))
     ;(setenv "http_proxy" "socks5h://127.0.0.1:1080") ; elfeed uses curl, this makes curl called from emacs use proxy

   #+END_SRC

* Dependencies

This config requires Org-mode newer than 8.0, and Emacs > 23.

#+BEGIN_SRC emacs-lisp
  (when (version<= emacs-version "24")
  (message "This config requires at least Emacs 24, please upgrade."))

#+END_SRC

This config utilizes Emacs' package support. Some additional repositories are added.

#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

Bootstrap =use-package=.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package) ; unless it is already installed
    (package-refresh-contents) ; updage packages archive
    (package-install 'use-package)) ; and install the most recent version of use-package

  (require 'use-package)
#+END_SRC

* Look
  中文和英文字体显示应对齐，一个汉字对应两个英文字符。
  Chinese and English displays should align perfectly.
  
  #+BEGIN_SRC emacs-lisp

    (progn ;; set English font
          (set-face-attribute 'default nil :font "Envy Code R-12")
          ;; Chinese font
          (dolist (charset '(kana han cjk-misc bopomofo))
            (set-fontset-font (frame-parameter nil 'font)
            charset (font-spec :family "Source Han Sans CN"
            :size 18)))
            (setq face-font-rescale-alist '(("Source Han Sans CN" . 1.0))))
  #+END_SRC
  
  The following are theme setup.
  #+BEGIN_SRC emacs-lisp
    (use-package darktooth-theme :ensure t
      :config (load-theme 'darktooth t nil))
  #+END_SRC

** Telephone-line: A fancy modeline
   #+BEGIN_SRC emacs-lisp
     (use-package telephone-line :ensure t
       :config
       (setq telephone-line-lhs
             '((evil   . (telephone-line-evil-tag-segment))
               (accent . (telephone-line-vc-segment
                          telephone-line-erc-modified-channels-segment
                          telephone-line-process-segment))
               (nil    . (telephone-line-minor-mode-segment
                          telephone-line-buffer-segment))))
       (setq telephone-line-rhs
             '((nil    . (telephone-line-misc-info-segment))
               (accent . (telephone-line-major-mode-segment))
               (evil   . (telephone-line-airline-position-segment))))
       (telephone-line-mode 1))
   #+END_SRC
* Smartparens and rainbow delimiters

  Smartparens is an extension for more effective programming with less cause by
  missing/unmatched parentheses. Rainbow delimeters is for better looking interface.
  
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens :ensure t
      :config
      (smartparens-global-mode t)
      (require 'smartparens-config)
      :diminish smartparens-mode)

    (use-package rainbow-delimiters :ensure t
      :config
      (add-to-list 'prog-mode-hook #'rainbow-delimiters-mode))
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile :ensure t
      :config (projectile-global-mode)
      :diminish projectile-mode "P")

    (use-package counsel-projectile :ensure t
      :config (counsel-projectile-on))
  #+END_SRC
* Evil-mode
  Evil-mode allows vim-style modes and keybindings in Emacs. Now you have the best editor in the best Lisp Machine.

  #+BEGIN_SRC emacs-lisp
    (use-package evil :ensure t
                 :config
                 (evil-mode 1)
                 (evil-set-initial-state 'eww-mode 'emacs)
                 (evil-set-initial-state 'elfeed-search-mode 'emacs)
                 (evil-set-initial-state 'elfeed-show-mode 'emacs)
                 :diminish undo-tree-mode)
  #+END_SRC
  
* Org-mode
** TODO I am not using org-mode for most of my notes now, so the setup may be simplified here when I find time.
  #+BEGIN_SRC emacs-lisp
    (use-package org :ensure org-plus-contrib
      :config
      (progn
        (setq org-hide-emphasis-markers t) ; hide markers around bold/emphasis/delete etc, original value is nil.
        (setq org-ellipsis " ↲") ; more dense ellipsis, original value is '...'
        (setq org-agenda-files (list 
                                "~/org/organizer.org"
                                "~/org/notes/"))
        (setq org-todo-keywords
              '((sequence "TODO(t)" "WAITING(w@/!)" "|" "DONE(d@/!)" "CANCELLED(c@/!)")))
        (setq org-use-fast-todo-selection t)
        (setq org-use-fast-tag-selection t)
        (setq org-agenda-ndays 7)
        (setq org-agenda-show-all-dates t)
        (setq org-agenda-skip-scheduled-if-done t)
        (setq org-agenda-start-on-weekday nil)
        (setq org-reverse-note-order t) ; notes attached to item sorted in date desc order
        (setq org-deadline-warning-days 14) ; depend on your pacing, default is 3
        (setq org-default-notes-file "~/org/organizer.org")
        (setq org-capture-templates
              '(("t" "Task" entry (file+headline org-default-notes-file "Inbox")
                 "* TODO %^{Title}\n")
                ("b" "Bookmark" entry (file+headline org-default-notes-file "Bookmarks")
                 "* %^{Title} %^g\n %^{URI} %?\n")
                ("n" "Work Notes" entry (clock)
                 "* %^{Title}\n %U \n %^C \n\n %?")
                ("r" "Read Notes" entry (file+headline org-default-notes-file "Notes")
                 "* %^{Title} %^g\n %^{URI|%x|%c} \n %?")
                ("q" "Quotes" entry (file+headline org-default-notes-file "Quotes")
                 "* %^{Text|%x|%c} %^g\n --%^{Source}")
                ("s" "Snippet" entry (file+headline org-default-notes-file "Snippets")
                 "* %^{Title} %^g\n %U \n #+BEGIN_SRC \n %^C \n #+END_SRC \n %?")))
        (setq org-refile-targets '((nil . (:maxlevel . 6)))) ; default is to maxlevel 2
        (setq org-babel-load-languages
              '((sh . t)
                (emacs-lisp . t)
                (ruby . t)
                                            ;(R . t)
                (dot . t)
                (python . t)
                (haskell . t))) ; these are the langs I work with
        (org-babel-do-load-languages 'l t) ; required for the above to work
        (setq org-publish-project-alist
              '(("expoundite.net" :components ("essays"
                                               "assets"
                                               "blog"
                                               "rss"))
                ("essays" :base-directory "~/org/publishing"
                 :publishing-directory "~/org/published"
                 :base-extension "org"
                 :exclude "upload\.org\\|-draft-.*?\.org"
                 :html-postamble t
                 :recursive t
                 :auto-sitemap t
                 :html-doctype "html5"
                 :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
                 :sitemap-sans-extension t
                 :publishing-function org-html-publish-to-html)
                ("assets" :base-directory "~/org/publishing/assets"
                 :base-extension any
                 :publishing-directory "~/org/published"
                 :publishing-function org-publish-attachment
                 :recursive t)
                ("blog" :base-directory "~/org/publishing/blog"
                 :publishing-directory "~/org/published/blog"
                 :recursive t
                 :with-toc nil
                 :html-postamble t
                 :html-doctype "html5"
                 :html-head-extra "<link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://expoundite.net/blog/rss.xml\" title=\"RSS Feed\"> 
                           <style type=\"text/css\"> 
                               h2 { font-size: 24px; } 
                               pre.example { background-color: rgba(255,255,255,255);
                                             border: none; }
                           </style>"
                 :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
                 :publishing-function org-html-publish-to-html)
                ("rss" :base-directory "~/org/publishing/blog"
                 :base-extension "org"
                 :publishing-directory "~/org/published/blog"
                 :publishing-function (org-rss-publish-to-rss)
                 :exclude ".*"
                 :include ("rss.org")
                 :html-link-home "https://expoundite.net/blog"
                 :html-link-use-abs-url t)))
        (setq org-html-mathjax-options
              '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
                (scale 100)
                (align "center")
                (font "TeX")
                (linebreaks "false")
                (autonumber "AMS")
                (indent "0em")
                (multlinewidth "85%")
                (tagindent ".8em")
                (tagside "right")))
        (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                              (paragraph contents info) activate)
          "Join consecutive Chinese lines into a single long line without 
    unwanted space when exporting org-mode to html."
          (let ((fixed-contents)
                (orig-contents (ad-get-arg 1))
                (reg-han "[[:multibyte:]]"))
            (setq fixed-contents (replace-regexp-in-string
                                  (concat "\$latex " reg-han
                                          "\$ *\n *\$latex " reg-han "\$")
                                  "\\1\\2" orig-contents))
            (ad-set-arg 1 fixed-contents)))

        (setq org-html-preamble-format
              '(("en" "<div class=\"leftside\" id=\"menu-closed\"><div>&#x2263;</div></div>
                   <div class=\"middlesection\"></div>")))

        (setq org-html-postamble-format
              '(("en" "<footer><p><a href=\"/\">Home</a> | <a href=\"/sitemap\">Site Map</a></p><hr>Created by <span class=\"author\"><a href=\"https://about.me/haoyangxu\">%a</a> (%e) on %d</span> <br>under <a href=\"https://creativecommons.org/licenses/by-sa/4.0/\">CC-BY-SA 4.0</a><p>Last Modified at %C</p></footer>")))

        (setq org-html-head
              "<link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\">
          <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">
          <link href=\"https://fonts.googleapis.com/css?family=Sanchez|PT+Mono|Roboto:300\" rel=\"stylesheet\">
          <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/main.css\">
          <script src=\"/js/minified-web.js\" type=\"text/javascript\"></script>
          <script src=\"/js/main.js\" type=\"text/javascript\"></script>")))
  #+END_SRC
** Org-bullets
   This package makes cooler Org-mode headings.

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
       )
   #+END_SRC

** Org-ref
   Org-ref is a package for inserting bibliography citations into org-mode articles. The user manual is located at https://github.com/jkitchin/org-ref/blob/master/org-ref.org.

   One can use the following to specify the .bib file to use and the bibliography style:

    #+BEGIN_EXAMPLE
    * References
    <<bibliography link>>

    bibliographystyle:unsrt
    bibliography:org-ref.bib
    #+END_EXAMPLE
    #+BEGIN_SRC emacs-lisp
      (use-package org-ref :ensure t
        :config
        (setq reftex-default-bibliography '("~/org/bibliography/references.bib"))
        (setq org-ref-bibliography-notes "~/org/bibliography/notes.org"
              org-ref-default-bibliography '("~/org/bibliography/references.bib")
              org-ref-pdf-directory "~/org/bibliography/bibtex-pdfs/")
        )
    #+END_SRC
** ox-rss
   This is a package for producing RSS feeds from org-mode headings.

   #+BEGIN_SRC emacs-lisp
     (require 'ox-rss)

   #+END_SRC
* Deft
  Deft is a note-taking tool allowing one to use Emacs like Notational Velocity
  and Simplenote. I am using it to quickly access the backend of a local Ikiwiki
  installation.
  
  #+BEGIN_SRC emacs-lisp
    (use-package deft :ensure t
      :config
      (setq deft-extensions '("mdwn" "txt"))
      (setq deft-default-extension "mdwn")
      (setq deft-directory "~/Notes")
      (setq deft-recursive t)
      (setq deft-use-filename-as-title t)
      (setq deft-use-filter-string-for-filename t))
  #+END_SRC
* Swiper and friends

  #+BEGIN_SRC emacs-lisp
    (use-package swiper :ensure t
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      :diminish ivy-mode
    )
    (use-package counsel :ensure t)
  #+END_SRC
* Version control

  #+BEGIN_SRC emacs-lisp
    (use-package magit :ensure t
      :diminish auto-revert-mode)
  #+END_SRC
* general.el and keybindings

  #+BEGIN_SRC emacs-lisp
    (use-package general :ensure t
     :config
      (general-define-key
       :states '(normal visual insert emacs)
       :prefix "SPC"
       :non-normal-prefix "S-SPC"

       ;; simple commands
       "/" 'counsel-ag
       "x" 'counsel-M-x
       "U" 'counsel-unicode-char
       "#" 'ansi-term

       ;; applications
       "a" '(:ignore t :which-key "Applications")
       "ad" 'dired
       "ae" 'elfeed

       ;; buffer operations
       "b" '(:ignore t :which-key "Buffer commands")
       "bb" 'ivy-switch-buffer
       "bl" 'ibuffer
       "bd" 'evil-delete-buffer
       "bp" 'evil-prev-buffer
       "bn" 'evil-next-buffer
       
       ;; deft operations
       "d" '(:ignore t :which-key "Deft")
       "dd" 'deft
       "df" 'deft-find-file

       ;; file and dir commands
       "f"  '(:ignore t :which-key "File commands")
       "ff" 'counsel-find-file
       "fa" 'find-file-at-point
       "fp" 'counsel-projectile
       "fs" 'save-buffer
       "fr" 'counsel-recentf

       ;; git operations
       "g" '(:ignore t :which-key "Git commands")
       "gs" 'magit-status
       "gd" 'magit-diff
       "gl" 'magit-log

       ;; help and docs
       "h" '(:ignore t :which-key "Help and documentation")
       "hf" 'counsel-describe-function
       "hv" 'counsel-describe-variable
       "hw" 'woman
       "hi" 'counsel-info-lookup-symbol

       ;; org-mode
       "o" '(:ignore t :which-key "Org-mode")
       "oa" 'org-agenda
       "oc" 'org-capture
       "oe" 'org-edit-special
       "ol" 'org-store-link
       "oL" 'org-insert-link
       "oo" 'counsel-outline
       "ot" 'counsel-org-tag

       ;; window operations
       "w" '(:ignore t :which-key "Windows")
       "ww" 'ace-window
       "wo" 'delete-other-windows
       "wv" 'evil-window-vsplit
       "ws" 'evil-window-split
       "wj" 'evil-window-down
       "wk" 'evil-window-up
       "wl" 'evil-window-right
       "wh" 'evil-window-left)
      (general-define-key "C-s" 'swiper))
    (use-package which-key :ensure t
      :config
      (which-key-mode 1)
      :diminish which-key-mode)
  #+END_SRC
* Completion
  At this point in time, it seems you should go for company-mode rather than auto-complete.

  #+BEGIN_SRC emacs-lisp
    (use-package company :ensure t
      :config
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-backend-list '(company-robe
                                 company-web
                                 company-capf))
      :diminish company-mode)
  #+END_SRC

* Elfeed
  #+BEGIN_SRC emacs-lisp
    (use-package elfeed-org :ensure t)
    (use-package elfeed :ensure t
      :config
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/org/elfeed.org")))
  #+END_SRC
