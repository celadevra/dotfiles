* README

Haoyang's GNU Emacs configuration, the n-th iteration.

Ideas are from [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]], [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sache Chua's config]], and my desire to use Org-mode as an effective project management tool.

** Principles

- Effective navigation (hence Evil-mode)
- Easy to read and edit (hence evil-leader, visual-line-mode)
- Simlified shortcuts
- Self documenting

* Basic information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Haoyang Xu")
(setq user-mail-address "github@expoundite.net")
#+END_SRC
* Dependencies

This config requires Org-mode newer than 8.0, and Emacs > 23.

#+BEGIN_SRC emacs-lisp
(when (version<= emacs-version "24")
  (message "This config requires at least Emacs 24, please upgrade."))
#+END_SRC

This config utilizes Emacs' package support. Some additional repositories are added.

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")
			 ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

Auto check and install packages, thanks to http://stackoverflow.com/a/10093312

#+BEGIN_SRC emacs-lisp
  (setq package-list '(ace-window
                       chinese-pyim
                       company
                       company-ghci
                       company-web
                       deft
                       ebib
                       ebib-handy
                       elfeed
                       elfeed-org
                       ess
                       evil
                       evil-leader
                       evil-numbers
                       evil-paredit
                       evil-smartparens
                       exec-path-from-shell
                       flycheck-haskell
            ;           guide-key
                       haskell-mode
                       haskell-snippets
                       helm
                       helm-ag
                       helm-c-yasnippet
                       helm-dash
                       helm-git
                       helm-projectile
                       htmlize
                       jade-mode
                       js2-mode
                       lush-theme
                       magit
                       markdown-mode
                       nm
                       org-plus-contrib
                       org-bullets
                       org-ref
                       ox-pandoc
                       pandoc-mode
                       projectile
                       robe
                       smart-mode-line
                       vc-fossil
                       vc-darcs
                       yasnippet
                       yaml-mode))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC
* Behaviour
I am too used to Vim keybindings, esp. the movement keys, to go back to Emacs' default.

evil-leader is a very useful add on to save a lot of key strokes.

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
(require 'evil-leader)
(global-evil-leader-mode) ; must be activated before evil-mode
(evil-leader/set-leader "<SPC>")

(require 'evil)
(evil-mode 1)
#+END_SRC

Some modes such as EWW and elfeed comes with their own shortcut keys, and it's best to set their initial state to "Emacs" in Evil.

#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'eww-mode 'emacs)
  (evil-set-initial-state 'elfeed-search-mode 'emacs)
  (evil-set-initial-state 'elfeed-show-mode 'emacs)
  (evil-set-initial-state 'deft-mode 'emacs)
#+END_SRC

What I do most would be text editing in contrast to code editing, thus visual line would be nice.

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

Magit doesn't have to revert unsaved buffers:

#+BEGIN_SRC emacs-lisp
(setq magit-auto-revert-mode nil)
#+END_SRC

Use projectile globally:
#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
#+END_SRC

# Use guide-key to show what to press next:

# #+BEGIN_SRC emacs-lisp
# (setq guide-key/guide-key-sequence '("<SPC>"))
# (guide-key-mode 1)
# #+END_SRC

** Backup

Stop emacs from making backup in the same dir as the file being edited. But use a special dir for backup files.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/backup")))
(setq version-control t)
(setq delete-old-versions t)
#+END_SRC

Must control the population of the backup dir, lest it becomes too crowded.
#+BEGIN_SRC emacs-lisp
(call-process-shell-command "find ~/backup/* -mtime +5 -exec rm {} \\;" nil 0)
#+END_SRC

** Environment Variables
   Emacs in GUI mode should get the exec paths from shell:
#+BEGIN_SRC emacs-lisp
  (exec-path-from-shell-initialize)
#+END_SRC
Let Emacs in GUI mode recognize rbenv settings:
#+BEGIN_SRC emacs-lisp
;; Setting rbenv path
(setenv "PATH" (concat (getenv "HOME") "/.rbenv/shims:" (getenv "HOME") "/.rbenv/bin:" (getenv "PATH")))
(setq exec-path (cons (concat (getenv "HOME") "/.rbenv/shims") (cons (concat (getenv "HOME") "/.rbenv/bin") exec-path)))
#+END_SRC

[[http://marc-bowes.com/2012/03/10/rbenv-with-emacs.html][Source]]
** Version Control with Fossil and darcs
#+BEGIN_SRC emacs-lisp
(add-to-list 'vc-handled-backends 'Fossil)
(add-to-list 'vc-handled-backends 'darcs)
#+END_SRC
** Web browsing
Always use default browser:
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-default-browser)
#+END_SRC
* Look

Many elements of vanilla Emacs can be safely disabled:

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode 0)
(setq inhibit-startup-screen 1)
#+END_SRC

** Code highlighting in org code blocks

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
   
** Org-mode ellipsis
#+BEGIN_SRC emacs-lisp
    (setq org-ellipsis " ⋯")
#+END_SRC
** Theming

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
	  (lambda ()
            (if (eq window-system nil)
              (load-theme 'lush t)
	    (load-theme 'tango-dark t))))
#+END_SRC

** Fonts
   中文和英文字体显示应对齐，一个汉字对应两个英文字符。
   Chinese and English displays should align perfectly.
#+BEGIN_SRC emacs-lisp
(if (display-graphic-p nil)
    (progn ;; set English font
      (set-face-attribute 'default nil :font "PT Mono-12")
      ;; Chinese font
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
        charset (font-spec :family "STSong"
        :size 13)))
	(setq face-font-rescale-alist '(("STSong" . 1.1)))))
#+END_SRC

STSong leaves very little line spacing, thus increase it a little.

#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 3)
#+END_SRC

Some East Asia characters have ambiguous width. The following settings are from http://attonblog.blogspot.hk/2014/03/unicode-east-asian-ambiguous-2.html, which should solve the problem.

#+BEGIN_SRC emacs-lisp
  ; east asian ambiguous character table
  (defun east-asian-ambiguous-characters ()
    '(
      (#x00A1 . #x00A1) (#x00A4 . #x00A4) (#x00A7 . #x00A8)
      (#x00AA . #x00AA) (#x00AD . #x00AE) (#x00B0 . #x00B4)
      (#x00B6 . #x00BA) (#x00BC . #x00BF) (#x00C6 . #x00C6)
      (#x00D0 . #x00D0) (#x00D7 . #x00D8) (#x00DE . #x00E1)
      (#x00E6 . #x00E6) (#x00E8 . #x00EA) (#x00EC . #x00ED)
      (#x00F0 . #x00F0) (#x00F2 . #x00F3) (#x00F7 . #x00FA)
      (#x00FC . #x00FC) (#x00FE . #x00FE) (#x0101 . #x0101)
      (#x0111 . #x0111) (#x0113 . #x0113) (#x011B . #x011B)
      (#x0126 . #x0127) (#x012B . #x012B) (#x0131 . #x0133)
      (#x0138 . #x0138) (#x013F . #x0142) (#x0144 . #x0144)
      (#x0148 . #x014B) (#x014D . #x014D) (#x0152 . #x0153)
      (#x0166 . #x0167) (#x016B . #x016B) (#x01CE . #x01CE)
      (#x01D0 . #x01D0) (#x01D2 . #x01D2) (#x01D4 . #x01D4)
      (#x01D6 . #x01D6) (#x01D8 . #x01D8) (#x01DA . #x01DA)
      (#x01DC . #x01DC) (#x0251 . #x0251) (#x0261 . #x0261)
      (#x02C4 . #x02C4) (#x02C7 . #x02C7) (#x02C9 . #x02CB)
      (#x02CD . #x02CD) (#x02D0 . #x02D0) (#x02D8 . #x02DB)
      (#x02DD . #x02DD) (#x02DF . #x02DF) (#x0300 . #x036F)
      (#x0391 . #x03A9) (#x03B1 . #x03C1) (#x03C3 . #x03C9)
      (#x0401 . #x0401) (#x0410 . #x044F) (#x0451 . #x0451)
      (#x2010 . #x2010) (#x2013 . #x2016) (#x2018 . #x2019)
      (#x201C . #x201D) (#x2020 . #x2022) (#x2024 . #x2027)
      (#x2030 . #x2030) (#x2032 . #x2033) (#x2035 . #x2035)
      (#x203B . #x203B) (#x203E . #x203E) (#x2074 . #x2074)
      (#x207F . #x207F) (#x2081 . #x2084) (#x20AC . #x20AC)
      (#x2103 . #x2103) (#x2105 . #x2105) (#x2109 . #x2109)
      (#x2113 . #x2113) (#x2116 . #x2116) (#x2121 . #x2122)
      (#x2126 . #x2126) (#x212B . #x212B) (#x2153 . #x2154)
      (#x215B . #x215E) (#x2160 . #x216B) (#x2170 . #x2179)
      (#x2190 . #x2199) (#x21B8 . #x21B9) (#x21D2 . #x21D2)
      (#x21D4 . #x21D4) (#x21E7 . #x21E7) (#x2200 . #x2200)
      (#x2202 . #x2203) (#x2207 . #x2208) (#x220B . #x220B)
      (#x220F . #x220F) (#x2211 . #x2211) (#x2215 . #x2215)
      (#x221A . #x221A) (#x221D . #x2220) (#x2223 . #x2223)
      (#x2225 . #x2225) (#x2227 . #x222C) (#x222E . #x222E)
      (#x2234 . #x2237) (#x223C . #x223D) (#x2248 . #x2248)
      (#x224C . #x224C) (#x2252 . #x2252) (#x2260 . #x2261)
      (#x2264 . #x2267) (#x226A . #x226B) (#x226E . #x226F)
      (#x2282 . #x2283) (#x2286 . #x2287) (#x2295 . #x2295)
      (#x2299 . #x2299) (#x22A5 . #x22A5) (#x22BF . #x22BF)
      (#x2312 . #x2312) (#x2460 . #x24E9) (#x24EB . #x254B)
      (#x2550 . #x2573) (#x2580 . #x258F) (#x2592 . #x2595)
      (#x25A0 . #x25A1) (#x25A3 . #x25A9) (#x25B2 . #x25B3)
      (#x25B6 . #x25B7) (#x25BC . #x25BD) (#x25C0 . #x25C1)
      (#x25C6 . #x25C8) (#x25CB . #x25CB) (#x25CE . #x25D1)
      (#x25E2 . #x25E5) (#x25EF . #x25EF) (#x2605 . #x2606)
      (#x2609 . #x2609) (#x260E . #x260F) (#x2614 . #x2615)
      (#x261C . #x261C) (#x261E . #x261E) (#x2640 . #x2640)
      (#x2642 . #x2642) (#x2660 . #x2661) (#x2663 . #x2665)
      (#x2667 . #x266A) (#x266C . #x266D) (#x266F . #x266F)
      (#x273D . #x273D) (#x2776 . #x277F) (#xE000 . #xF8FF)
      (#xFE00 . #xFE0F) (#xFFE0 . #xFFE6) (#xFFFD . #xFFFD)))

  ; setting function
  (defun set-east-asian-ambiguous-width (width)
    (cond ((= emacs-major-version 22) (set-east-asian-ambiguous-width-22 width))
          ((> emacs-major-version 22) (set-east-asian-ambiguous-width-23 width))))

  ; for emacs 22
  (defun set-east-asian-ambiguous-width-22 (width)
    (if (= width 2)
      (utf-translate-cjk-set-unicode-range (east-asian-ambiguous-characters))))

  ; for over 23 (checked work in emacs 24)
  (defun set-east-asian-ambiguous-width-23 (width)
    (while (char-table-parent char-width-table)
           (setq char-width-table (char-table-parent char-width-table)))
    (let ((table (make-char-table nil)))
      (dolist (range (east-asian-ambiguous-characters))
        (set-char-table-range table range width))
      (optimize-char-table table)
      (set-char-table-parent table char-width-table)
      (setq char-width-table table)))
  
  (set-east-asian-ambiguous-width 2)

#+END_SRC
** Mode line

I am trying out smart-mode-line.
#+BEGIN_SRC emacs-lisp
(setq sml/no-confirm-load-theme t)
(setq sml/theme 'light)
(sml/setup)
#+END_SRC

A few extra things I want to show in mode line:
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(display-battery-mode 1)
#+END_SRC
** Visual aids for programming
   I used to let emacs show line numbers on the left side, just like vim. But I find it distracting, as Emacs' linum function is not well implemented, so I disabled it.

Show corresponding parentheses:
#+BEGIN_SRC emacs-lisp
(smartparens-global-mode 1)
(show-smartparens-global-mode +1)
#+END_SRC

   It would be nice to have ANSI colors in the compilation buffer:

   #+BEGIN_SRC emacs-lisp
     ;; from http://stackoverflow.com/a/20788581
     (ignore-errors
       (require 'ansi-color)
       (defun my-colorize-compilation-buffer ()
         (when (eq major-mode 'compilation-mode)
           (ansi-color-apply-on-region compilation-filter-start (point-max))))
       (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer))
   #+END_SRC

* Custom functions

** Find (open) emacs configuration files

#+BEGIN_SRC emacs-lisp
(defun find-init-file () (interactive)
  "Find configuration files"
  (progn
    (delete-other-windows)
    (find-file "~/Codes/dotfiles/emacs/init.el")
    (find-file-other-window "~/Codes/dotfiles/emacs/Haoyang.org")))
#+END_SRC

** Find task file
   It would be nice to open task file with simple keystrokes.
   #+BEGIN_SRC emacs-lisp
     (defun find-task-file () (interactive)
            "Find task file"
            (find-file "~/org/tasks.org"))
   #+END_SRC
** Find notes file
   #+BEGIN_SRC emacs-lisp
     (defun find-notes-file () (interactive)
            "Find notes file"
            (find-file "~/org/notes.org"))
   #+END_SRC
** Issue numbering automation in Org-mode

Find the largest number from issues in the buffer, for example, when there are tags like "issue5" "issue31" "issue33", it returns 33.

#+BEGIN_SRC emacs-lisp
(defun largest-issue-number ()
  "Find the largest number in issue tags"
  (let* ((issue-regexp ":issue[0-9]*:")
         (issues-list (re-seq issue-regexp 
                        (substring-no-properties (buffer-string)))))
    (if issues-list 
      (apply 'max (mapcar (lambda (str) (string-to-number str))
	  (mapcar (lambda (str) (replace-regexp-in-string "[:isue]*" "" str)) issues-list)))
 0)))

; from http://emacs.stackexchange.com/questions/7148/get-all-regexp-matches-in-buffer-as-a-list
(defun re-seq (regexp string)
  "Get a list of all regexp matches in a string"
  (save-match-data
    (let ((pos 0)
          matches)
      (while (string-match regexp string pos)
        (push (match-string 0 string) matches)
        (setq pos (match-end 0)))
      matches)))
#+END_SRC

Then when the key for assigning issue is pressed, get org-mode to assign tag with incresed issue count:

#+BEGIN_SRC emacs-lisp
(defun assign-issue-number ()
  "Assign issue number to heading."
  (interactive)
  (org-set-tags-to (cons (concat "issue" 
    (number-to-string (+ 1 (largest-issue-number)))) 
    (org-get-tags-at (point) t))))
#+END_SRC
** My context-aware tab key
   #+BEGIN_SRC emacs-lisp
     (defun hy-org-tab ()
       "Part of the effort to make the <TAB> key behaviour
       context-dependent. In Org-mode
       and Evil Normal mode, fold/unfold the outline."
       (evil-define-key 'normal org-mode-map (kbd "<tab>") 'org-cycle))
   #+END_SRC
** Org-bullets only enabled under GUI
   Not used currently, as Terminal.app handles these bullets well enough.
#+BEGIN_SRC emacs-lisp
  (defun hy-enable-org-bullets ()
    "Only allow org-bullets in GUI environment, as many terms don't
  know how to show UTF-8 chars correctly."
    (if (eq window-system nil)
        (progn
          (org-bullets-mode -1)
          (setq org-hide-leading-stars t))
      (org-bullets-mode 1)))
#+END_SRC
** Count number of chars/words in current buffer/region

   #+BEGIN_SRC emacs-lisp
     (defun hy-word-count ()
       "Calculate number of chars and words in the current buffer or active region."
       (interactive)
       (if (use-region-p)
           (message "%d chars, %d words" (abs (- (point) (mark)))
                    (count-words-region (point) (mark)))
         (message "%d chars, %d words" (- (point-max) (point-min))
                    (count-words-region (point-max) (point-min)))))
   #+END_SRC
* Keybindings
** evil-leader
First, some combinations using evil-leader:

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "x" 'helm-M-x)
  (evil-leader/set-key "=" 'hy-word-count)
  (evil-leader/set-key
    "gs" 'magit-status
    "gb" 'magit-checkout)
  (evil-leader/set-key
    "dd" 'deft)
  (evil-leader/set-key 
    "oc" 'org-capture
    "oa" 'org-agenda
    "ohh" 'helm-org-in-buffer-headings
    "ohc" 'helm-occur
    "ol" 'org-store-link
    "oL" 'org-insert-link
    "ob" 'ebib-handy
    "ot" 'org-todo-list
    "oi" 'assign-issue-number)
  (evil-leader/set-key
    "ff" 'helm-find-files
    "fa" 'find-file-at-point
    "fi" 'find-init-file
    "fd" 'dired-at-point
    "fn" 'deft-find-file
    "fs" 'save-buffer
    "ft" 'find-task-file)
  (evil-leader/set-key
    "h-" 'helm-dash-at-point
    "ha" 'helm-ag
    "hc" 'helm-occur
    "hd" 'helm-dash
    "hi" 'helm-imenu
    "hg" 'helm-projectile-ag
    "hp" 'helm-projectile)
  (evil-leader/set-key
    "bb" 'helm-buffers-list
    "bd" 'kill-buffer)
  (evil-leader/set-key
    "vv" 'vc-next-action)
  (evil-leader/set-key
    "w0" 'delete-window
    "ww" 'ace-window
    "wv" 'split-window-horizontally
    "ws" 'split-window-vertically
    "wl" 'evil-window-right
    "wh" 'evil-window-left
    "wj" 'evil-window-down
    "wk" 'evil-window-up
    "w=" 'balance-windows)
#+END_SRC

** The tricky TAB key
   Mapping tab key in emacs with Evil and org-mode can be a little tricky as it can do so much, esp in org-mode. The goal is to make it behave as indent, completion, and fold/unfold key. #This involves writing custom functions to make it more context-aware.#

   #+BEGIN_SRC emacs-lisp
   (evil-define-key 'normal org-mode-map (kbd "<tab>") 'org-cycle)
   #+END_SRC
   
   above makes tab key work in Org-mode in Cocoa and terminal again. I don't use C-i jump anyway.
   
   In other places, when in Evil's insert mode, M-tab serves as the pcompletion key. Vi's C-n and C-p key also works. I guess I have to get used to them.
* Mail
** notmuch/nevermore settings
   
Start ~gpg-agent~ with emacs:
#+BEGIN_SRC emacs-lisp
  (async-shell-command "eval $(gpg-agent --daemon)" nil)
#+end_SRC

Read mail settings:
#+BEGIN_SRC emacs-lisp
  (setq notmuch-crypto-process-mime t)
#+END_SRC


User info:
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "haoyang@expoundite.net"
        user-full-name "Haoyang Xu")
#+END_SRC

Send mail settings, the documentation provided by fastmail is problematic, see [[http://stackoverflow.com/questions/22851076/sending-emails-with-emacs24-via-smtp-with-gnutls-and-extra-arguments#22898098][here]] for the correct setup:
#+BEGIN_SRC emacs-lisp
  (setq notmuch-fcc-dirs "INBOX.Sent")

  (require 'smtpmail)
  (require 'starttls)

  (defun gnutls-available-p ()
    "Function redefined in order not to use built-in GnuTLS support"
    nil)
  (setq starttls-gnutls-program "gnutls-cli")
  (setq starttls-use-gnutls t)
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-smtp-user "haoyang@fastmail.com"
        smtpmail-stream-type 'starttls
        smtpmail-default-smtp-server "mail.messagingengine.com"
        smtpmail-smtp-server "mail.messagingengine.com"
        smtpmail-smtp-service 587)

  ;; sign message by default
  (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
#+END_SRC

* RSS
  I am using [[https://github.com/skeeto/elfeed][Elfeed]] to read RSS feeds. I can read articles in Emacs, take notes in Emacs, and write up in Emacs. Sounds great.
  
  Thanks to the elfeed-org package I can store the feed list in an org-mode file.
** Initialize

   #+BEGIN_SRC emacs-lisp
     (require 'elfeed)
     (require 'elfeed-org)

     (elfeed-org)

     (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))
   #+END_SRC

   #+RESULTS:
   | ~/org/elfeed.org |

** Feeds
   Feeds are stored in +variable ~elfeed-feeds~+ ~/org/elfeed.org. Elfeed can also read from an OPML file. 

* Org-mode
  I am using Org-mode with Bullet Journal system. As a result I mainly take notes with Org-mode and leave agenda management to BuJo. This configuration may be somewhat different from other people's.
** Scope

The following controls which org-files are read for agenda items. There are two types of Org-mode files I am using. The first is a 'task' or 'hub' file that I use as the Inbox for incoming information/tasks. It also serves as the place I record my life story and notes that are not important enough to deserve their own notes.

The other type are "notes" in their general senses. Notes on some topics, and notes/tasks that belong to projects go there.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list 
                          "~/org/organizer.org"
                          "~/org/notes/"))
#+END_SRC

I have a "org" dir in my codes dir, version controlled with git, to store org files. 

The note files have a =#+CATEGORY= attribute, which is used to identify the status of the note. These categories are used:

- TOPIC: Notes on a certain topic
- WRITING: Drafts for writing
- PROJECT: Notes on a non-writing project

** Task identifiers

By default, Org-mode uses "TODO" and "DONE" to identify tasks to be completed and those already completed. I have a different view about todos. If you call them "todo", you tend to think of them as something others tells you /to do/. I call them "AVAILABLE", which signifies something you /want/ to do next.

Since August 2015 I quit the (boring) day job and decided to make something of my own. This requires writing documents and programming in a one-man army style. Thus the todo status has to be refined to reflect this new style of work.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t@/!)" "WAITING(w@/!)" "|" "DONE(d@/!)" "CANCELLED(c@/!)")))
  (setq org-use-fast-todo-selection t)
  (setq org-use-fast-tag-selection t)
#+END_SRC

** Agenda
   This part borrows heavily from John Wiegley's article /[[http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner/][Using org-mode as a day planner]]/.

   The following code set org-agenda to show 7 days in the future, counting from today.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-ndays 7)
(setq org-agenda-show-all-dates t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-start-on-weekday nil)
#+END_SRC

   I often attach some notes to the task at hand, it is easier to read if the notes are ordered from the newest to the oldest.
#+BEGIN_SRC emacs-lisp
(setq org-reverse-note-order t)
#+END_SRC

   Set warnings for deadline to 14.
#+BEGIN_SRC emacs-lisp
(setq org-deadline-warning-days 14)
#+END_SRC
** Capture

All captured items go into the big 'ledger' file.

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (if (file-exists-p "~/org/") "~/org/organizer.org" "C:/Users/haoyang/Dropbox/org/tasks.org"))
#+END_SRC

Setup capture templates. The data I capture are of the following kinds:

- Bookmarks. Materials I don't have time to read but will need in the future.
- Notes on materials that I read/watched.
- Quotes.
- Code snippets.
- Notes on current project.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
   '(("b" "Bookmark" entry (file+headline org-default-notes-file "Bookmarks")
      "* %^{Title} %^g\n %^{URI} %?\n")
     ("n" "Work Notes" entry (clock)
      "* %^{Title}\n %U \n %^C \n\n %?")
     ("r" "Read Notes" entry (file+headline org-default-notes-file "Notes")
      "* %^{Title} %^g\n %^{URI|%x|%c} \n %?")
     ("q" "Quotes" entry (file+headline org-default-notes-file "Quotes")
      "* %^{Text|%x|%c} %^g\n --%^{Source}")
     ("s" "Snippet" entry (file+headline org-default-notes-file "Snippets")
     "* %^{Title} %^g\n %U \n #+BEGIN_SRC \n %^C \n #+END_SRC \n %?")))
#+END_SRC
** Refiling
   I refile tasks to deeper levels, so I define the maxlevel of =org-refile= to at least 2.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((nil . (:maxlevel . 6))))
#+END_SRC
** Code blocks
   To execute code blocks in languages other than Emacs Lisp, we must load babel support for these languages:
#+BEGIN_SRC emacs-lisp
(setq org-babel-load-languages
  '((sh . t)
    (emacs-lisp . t)
    (ruby . t)
    (R . t)
    (dot . t)
    (python . t)
    (haskell . t)))
(org-babel-do-load-languages 'l t)
#+END_SRC
   Honestly I don't know why org-babel-do-load-languages needs a symbol as an argument, and the symbol seems can be anything.
   
** Org-bullets
   Make leading stars UTF-8 chars:
   #+BEGIN_SRC emacs-lisp
   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC
** Org-ref
   Org-ref is a package for inserting bibliography citations into org-mode articles. The user manual is located at https://github.com/jkitchin/org-ref/blob/master/org-ref.org.
   
   One can use the following to specify the .bib file to use and the bibliography style:

   #+BEGIN_EXAMPLE
     * References
     <<bibliography link>>

     bibliographystyle:unsrt
     bibliography:org-ref.bib
   #+END_EXAMPLE

   #+BEGIN_SRC emacs-lisp
     (require 'org-ref)

     (setq reftex-default-bibliography '("~/org/bibliography/references.bib"))

     (setq org-ref-bibliography-notes "~/org/bibliography/notes.org"
           org-ref-default-bibliography '("~/org/bibliography/references.bib")
           org-ref-pdf-directory "~/org/bibliography/bibtex-pdfs/")
   #+END_SRC
** Publishing
   For the past two years (2014-2015), I have mainly used [[https://jaspervdj.be/hakyll/][Hakyll]] to generate my website, with intermittent flirting with various static site generators written in Ruby or Python or JavaScript. Since I am an Emacs and Org-mode bitch I am trying to do it in Org-mode, using its native publishing capabilities.
   
   First of all, I need to define a project.

   #+BEGIN_SRC emacs-lisp
     (require 'ox-rss)
     (setq org-publish-project-alist
           '(("expoundite.net" :components ("essays"
                                          "assets"
                                          "blog"
                                          "rss"))
           ("essays" :base-directory "~/org/publishing"
            :publishing-directory "~/org/published"
            :base-extension "org"
            :exclude "upload\.org\\|-draft-.*?\.org"
            :html-postamble t
            :recursive t
            :auto-sitemap t
            :html-doctype "html5"
	    :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
            :sitemap-sans-extension t
            :publishing-function org-html-publish-to-html)
           ("assets" :base-directory "~/org/publishing/assets"
            :base-extension any
            :publishing-directory "~/org/published"
            :publishing-function org-publish-attachment
            :recursive t)
           ("blog" :base-directory "~/org/publishing/blog"
            :publishing-directory "~/org/published/blog"
            :recursive t
            :with-toc nil
            :html-postamble t
            :html-doctype "html5"
            :html-head-extra "<link rel=\"alternate\" type=\"application/rss+xml\" href=\"https://expoundite.net/blog/rss.xml\" title=\"RSS Feed\"> 
                            <style type=\"text/css\"> 
                                h2 { font-size: 24px; } 
                                pre.example { background-color: rgba(255,255,255,255);
                                              border: none; }
                            </style>"
	    :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
            :publishing-function org-html-publish-to-html)
           ("rss" :base-directory "~/org/publishing/blog"
            :base-extension "org"
            :publishing-directory "~/org/published/blog"
            :publishing-function (org-rss-publish-to-rss)
            :exclude ".*"
            :include ("rss.org")
            :html-link-home "https://expoundite.net/blog"
            :html-link-use-abs-url t)))
   #+END_SRC
   
   The next thing is to set up a template for the outputs. This is done by customizing ~org-html-preamble-format~ and ~org-html-postamble-format~.
   
   #+BEGIN_SRC emacs-lisp
     (setq org-html-preamble-format
           '(("en" "<div class=\"leftside\" id=\"menu-closed\"><div>&#x2263;</div></div>
                    <div class=\"middlesection\"></div>")))

     (setq org-html-postamble-format
           '(("en" "<footer><p><a href=\"/\">Home</a> | <a href=\"/sitemap\">Site Map</a></p><hr>Created by <span class=\"author\"><a href=\"https://about.me/haoyangxu\">%a</a> (%e) on %d</span> <br>under <a href=\"https://creativecommons.org/licenses/by-sa/4.0/\">CC-BY-SA 4.0</a><p>Last Modified at %C</p></footer>")))

     (setq org-html-head
           "<link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\">
           <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">
           <link href=\"https://fonts.googleapis.com/css?family=Sanchez|PT+Mono|Roboto:300\" rel=\"stylesheet\">
           <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/main.css\">
           <script src=\"/js/minified-web.js\" type=\"text/javascript\"></script>
           <script src=\"/js/main.js\" type=\"text/javascript\"></script>")
   #+END_SRC
*** Mathjax settings
    By default, Org-Mode uses MathJax CDN to process math in published html files. This is a out-of-box solution. But as I am using HTTPS to serve my page, I want to make sure javascripts are served in HTTPS as well. 

    #+BEGIN_SRC emacs-lisp
      (setq org-html-mathjax-options
            '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
              (scale 100)
              (align "center")
              (font "TeX")
              (linebreaks "false")
              (autonumber "AMS")
              (indent "0em")
	      (multlinewidth "85%")
	      (tagindent ".8em")
	      (tagside "right")))
    #+END_SRC
*** auto enter org-mode for .page files
   
    My personal website uses ".page" as the extension for source files, which are actually org-mode files. So I want to switch to that mode when I open them.
 #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.page\\'" . org-mode))
 #+END_SRC
* Ebib

  #+BEGIN_SRC emacs-lisp
    (require 'ebib-handy)
    (ebib-handy-enable)

    (setq ebib-extra-fields
          '((BibTeX "keywords" "abstract" "timestamp"
                    "file"  "url" "crossref" "annote" "doi")
            (biblatex "keywords" "abstract" "timestamp"
                      "file"  "url" "crossref" "annote" "doi")))
  #+END_SRC
* Chinese Input
  The experience gained from the recent adventure in Spacemacs is that chinese-pyim is a useful package for inputing Chinese in Emacs.
  
  #+BEGIN_SRC emacs-lisp
    (require 'chinese-pyim)

    (setq default-input-method "chinese-pyim")
    (global-set-key (kbd "C-\\") 'toggle-input-method)
    ;; use shuang pin
    (setq pyim-default-pinyin-scheme 'pyim-shuangpin)
  #+END_SRC
  
  Company may jump out trying to complete sentences you typed before, which can be annoying. chinese-pyim provides a tweak to reduce the annoyance.

  #+BEGIN_SRC emacs-lisp
    (require 'chinese-pyim-company)
    (setq pyim-company-max-length 6)
  #+END_SRC
* Deft

  #+BEGIN_SRC emacs-lisp
    (require 'deft)
    (setq deft-directory "~/org/notes/")
    (setq deft-recursive t)
  #+END_SRC
* Elisp
  Settings for editing in Emacs-Lisp-mode.

  #+BEGIN_SRC emacs-lisp
    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  #+END_SRC
* ESS
  Initialize ESS library:

#+BEGIN_SRC emacs-lisp
  (require 'ess-site)
#+END_SRC
* Company mode

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
(setq company-backend-list '(company-robe
                             company-web
                             company-capf))
(dolist (backend company-backend-list)
  (eval-after-load 'company
  '(push 'company-robe company-backends)))
#+END_SRC
* Robe

  #+BEGIN_SRC emacs-lisp
  (add-hook 'ruby-mode-hook 'robe-mode)
  #+END_SRC
* Haskell
A few settings needed after installation, according to the[[https://wiki.haskell.org/Emacs/Installing_haskell-mode][ Official Page]].
#+BEGIN_SRC emacs-lisp
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
#+END_SRC

Generate tags on save, need ~hasktags~ installed and in ~exec-path~.
#+BEGIN_SRC emacs-lisp
  (require 'haskell-mode)
  (custom-set-variables
    '(haskell-tags-on-save t))
  (define-key haskell-mode-map (kbd "C-t") 'haskell-mode-jump-to-def-or-tag)
#+END_SRC
* JavaScript
** auto start js2-mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC
** Indent
Javascript can have a lot of levels of indent, so I think making indent smaller makes sense.
#+BEGIN_SRC emacs-lisp
  (setq-default js2-basic-offset 2)
#+END_SRC
* Markdown
** Use markdown-mode for .mdwn files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.mdwn\\'" . markdown-mode))
#+END_SRC
** also use pandoc mode to edit markdown
   When in markdown-mode, start pandoc-mode automatically, too.
#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook 'pandoc-mode)
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC
* Scratch Pad
  Experiment ground.
